// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.0.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Frog.FunctionalTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("In order to avoid retyping urls to register builds over and over agian\nAs a Runz tester\nI want to be setup the whole thing quickly")]
    [NUnit.Framework.CategoryAttribute("no_clean")]
    public partial class LazyPetarFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "TheUsualSuspects.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Lazy Petar", "In order to avoid retyping urls to register builds over and over agian\nAs a Runz tester\nI want to be setup the whole thing quickly", ProgrammingLanguage.CSharp, new string[]
                {
                        "no_clean"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register the usual suspects")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void RegisterTheUsualSuspects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register the usual suspects", new string[]
                {
                        "ignore"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have registered project URL \"http://github.com/pshomov/xray.git\"");
#line 10
 testRunner.And("I have registered project URL \"http://runzci:sans3r1f@github.com/pshomov/frog.git\"");
#line 11
 testRunner.And("I have registered project URL \"http://github.com/flq/MemBus.git\"");
#line 12
 testRunner.And("I have registered project URL \"http://github.com/grahamrhay/NHamcrest.git\"");
#line 13
 testRunner.And("I have registered project URL \"http://github.com/sinatra/sinatra.git\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
