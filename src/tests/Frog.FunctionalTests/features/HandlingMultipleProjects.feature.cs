// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.0.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Frog.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("In order to make this work\nAs a service provider\nI want to handle multiple projects in a completely independent manner")]
    public partial class MultipleProjectsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "HandlingMultipleProjects.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiple projects", "In order to make this work\nAs a service provider\nI want to handle multiple projects in a completely independent manner", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Build statuses for multiple successful projects")]
        public virtual void BuildStatusesForMultipleSuccessfulProjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build statuses for multiple successful projects", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a project as \"p1\"");
#line 8
 testRunner.And("I add a test task \"t1\" with content \"p1t1\" to project \"p1\"");
#line 9
 testRunner.And("I have a project as \"p2\"");
#line 10
 testRunner.And("I add a test task \"t1\" with content \"p2t1\" to project \"p2\"");
#line 11
 testRunner.And("I add a test task \"t2\" with content \"p2t2\" to project \"p2\"");
#line 12
 testRunner.And("I have a project as \"p3\"");
#line 13
 testRunner.And("I add a test task \"t1\" with content \"p3t1\" to project \"p3\"");
#line 14
 testRunner.And("I add a test task \"t2\" with content \"p3t2\" to project \"p3\"");
#line 15
 testRunner.And("I add a test task \"t3\" with content \"p3t3\" to project \"p3\"");
#line 16
 testRunner.And("I have registered project \"p1\"");
#line 17
 testRunner.And("I have registered project \"p2\"");
#line 18
 testRunner.And("I have registered project \"p3\"");
#line 19
 testRunner.When("I check for updates");
#line 20
 testRunner.Then("I am on the status page for project \"p1\"");
#line 21
 testRunner.And("I see the build is completed with status SUCCESS");
#line 22
 testRunner.And("The terminal output contains text \"S>p1t1\"");
#line 23
 testRunner.And("I am on the status page for project \"p2\"");
#line 24
 testRunner.And("I see the build is completed with status SUCCESS");
#line 25
 testRunner.And("The terminal output contains text \"S>p2t1\\nS>p2t2\"");
#line 26
 testRunner.And("I am on the status page for project \"p3\"");
#line 27
 testRunner.And("I see the build is completed with status SUCCESS");
#line 28
 testRunner.And("The terminal output contains text \"S>p3t1\\nS>p3t2\\nS>p3t3\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Build statuses for multiple successful and one failing projects")]
        public virtual void BuildStatusesForMultipleSuccessfulAndOneFailingProjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build statuses for multiple successful and one failing projects", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have a project as \"p1\"");
#line 32
 testRunner.And("I add a test task \"t1\" with content \"p1t1\" to project \"p1\"");
#line 33
 testRunner.And("I have a project as \"p2\"");
#line 34
 testRunner.And("I add a test task \"t1\" with content \"p2t1\" to project \"p2\"");
#line 35
 testRunner.And("I add a test task \"t2\" with content \"exception\" to project \"p2\"");
#line 36
 testRunner.And("I have a project as \"p3\"");
#line 37
 testRunner.And("I add a test task \"t1\" with content \"p3t1\" to project \"p3\"");
#line 38
 testRunner.And("I add a test task \"t2\" with content \"p3t2\" to project \"p3\"");
#line 39
 testRunner.And("I add a test task \"t3\" with content \"p3t3\" to project \"p3\"");
#line 40
 testRunner.And("I have registered project \"p1\"");
#line 41
 testRunner.And("I have registered project \"p2\"");
#line 42
 testRunner.And("I have registered project \"p3\"");
#line 43
 testRunner.When("I check for updates");
#line 44
 testRunner.Then("I am on the status page for project \"p1\"");
#line 45
 testRunner.And("I see the build is completed with status SUCCESS");
#line 46
 testRunner.And("The terminal output has text \"S>p1t1\"");
#line 47
 testRunner.And("I am on the status page for project \"p2\"");
#line 48
 testRunner.And("I see the build is completed with status FAILURE");
#line 49
 testRunner.And("The terminal output contains text \"S>p2t1\\nS>exception\"");
#line 50
 testRunner.And("I am on the status page for project \"p3\"");
#line 51
 testRunner.And("I see the build is completed with status SUCCESS");
#line 52
 testRunner.And("The terminal output has text \"S>p3t1\\nS>p3t2\\nS>p3t3\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
